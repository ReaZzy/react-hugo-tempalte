/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkreact_hugo"] = self["webpackChunkreact_hugo"] || []).push([["vendors-node_modules_react-table_src_index_js"],{

/***/ "./node_modules/react-table/src/aggregations.js":
/*!******************************************************!*\
  !*** ./node_modules/react-table/src/aggregations.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"sum\": function() { return /* binding */ sum; },\n/* harmony export */   \"min\": function() { return /* binding */ min; },\n/* harmony export */   \"max\": function() { return /* binding */ max; },\n/* harmony export */   \"minMax\": function() { return /* binding */ minMax; },\n/* harmony export */   \"average\": function() { return /* binding */ average; },\n/* harmony export */   \"median\": function() { return /* binding */ median; },\n/* harmony export */   \"unique\": function() { return /* binding */ unique; },\n/* harmony export */   \"uniqueCount\": function() { return /* binding */ uniqueCount; },\n/* harmony export */   \"count\": function() { return /* binding */ count; }\n/* harmony export */ });\nfunction sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(values) {\n  let min = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nfunction max(values) {\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nfunction minMax(values) {\n  let min = values[0] || 0\n  let max = values[0] || 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nfunction average(values) {\n  return sum(null, values) / values.length\n}\n\nfunction median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nfunction unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nfunction uniqueCount(values) {\n  return new Set(values).size\n}\n\nfunction count(values) {\n  return values.length\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/aggregations.js?");

/***/ }),

/***/ "./node_modules/react-table/src/filterTypes.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-table/src/filterTypes.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"text\": function() { return /* binding */ text; },\n/* harmony export */   \"exactText\": function() { return /* binding */ exactText; },\n/* harmony export */   \"exactTextCase\": function() { return /* binding */ exactTextCase; },\n/* harmony export */   \"includes\": function() { return /* binding */ includes; },\n/* harmony export */   \"includesAll\": function() { return /* binding */ includesAll; },\n/* harmony export */   \"includesSome\": function() { return /* binding */ includesSome; },\n/* harmony export */   \"includesValue\": function() { return /* binding */ includesValue; },\n/* harmony export */   \"exact\": function() { return /* binding */ exact; },\n/* harmony export */   \"equals\": function() { return /* binding */ equals; },\n/* harmony export */   \"between\": function() { return /* binding */ between; }\n/* harmony export */ });\nconst text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nconst exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nconst exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nconst includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nconst includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nconst includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nconst includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nconst exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nconst equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nconst between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/filterTypes.js?");

/***/ }),

/***/ "./node_modules/react-table/src/hooks/useColumnVisibility.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-table/src/hooks/useColumnVisibility.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useColumnVisibility\": function() { return /* binding */ useColumnVisibility; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetHiddenColumns = 'resetHiddenColumns'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideColumn = 'toggleHideColumn'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setHiddenColumns = 'setHiddenColumns'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nconst useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate)(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (columnId, value) =>\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetHiddenColumns)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/hooks/useColumnVisibility.js?");

/***/ }),

/***/ "./node_modules/react-table/src/hooks/useTable.js":
/*!********************************************************!*\
  !*** ./node_modules/react-table/src/hooks/useTable.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useTable\": function() { return /* binding */ useTable; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _makeDefaultPluginHooks__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../makeDefaultPluginHooks */ \"./node_modules/react-table/src/makeDefaultPluginHooks.js\");\n/* harmony import */ var _useColumnVisibility__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useColumnVisibility */ \"./node_modules/react-table/src/hooks/useColumnVisibility.js\");\n\n\n//\n\n\n\n\n\n\n\n\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nconst useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [_useColumnVisibility__WEBPACK_IMPORTED_MODULE_4__.useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: (0,_makeDefaultPluginHooks__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(stateReducer)\n\n  // Build the reducer\n  const reducer = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      (0,_utils__WEBPACK_IMPORTED_MODULE_1__.linkColumnStructure)(\n        (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().allColumns, (0,_utils__WEBPACK_IMPORTED_MODULE_1__.flattenColumns)(columns), {\n        instance: getInstance(),\n      }).map(_utils__WEBPACK_IMPORTED_MODULE_1__.assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.loopHooks)(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => (0,_utils__WEBPACK_IMPORTED_MODULE_1__.decorateColumn)(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (true) {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(\n        getHooks().headerGroups,\n        (0,_utils__WEBPACK_IMPORTED_MODULE_1__.makeHeaderGroups)(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.loopHooks)(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.loopHooks)(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makeRenderer)(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    row => {\n      row.getRowProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makeRenderer)(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.loopHooks)(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.loopHooks)(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = _utils__WEBPACK_IMPORTED_MODULE_1__.unpreparedAccessWarning\n      row.cells.filter = _utils__WEBPACK_IMPORTED_MODULE_1__.unpreparedAccessWarning\n      row.cells.forEach = _utils__WEBPACK_IMPORTED_MODULE_1__.unpreparedAccessWarning\n      row.cells[0].getCellProps = _utils__WEBPACK_IMPORTED_MODULE_1__.unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(\n        originalRow,\n        rowIndex,\n        row,\n        parentRows,\n        data\n      )\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.reduceHooks)(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/hooks/useTable.js?");

/***/ }),

/***/ "./node_modules/react-table/src/index.js":
/*!***********************************************!*\
  !*** ./node_modules/react-table/src/index.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useTable\": function() { return /* reexport safe */ _hooks_useTable__WEBPACK_IMPORTED_MODULE_1__.useTable; },\n/* harmony export */   \"useExpanded\": function() { return /* reexport safe */ _plugin_hooks_useExpanded__WEBPACK_IMPORTED_MODULE_2__.useExpanded; },\n/* harmony export */   \"useFilters\": function() { return /* reexport safe */ _plugin_hooks_useFilters__WEBPACK_IMPORTED_MODULE_3__.useFilters; },\n/* harmony export */   \"useGlobalFilter\": function() { return /* reexport safe */ _plugin_hooks_useGlobalFilter__WEBPACK_IMPORTED_MODULE_4__.useGlobalFilter; },\n/* harmony export */   \"useGroupBy\": function() { return /* reexport safe */ _plugin_hooks_useGroupBy__WEBPACK_IMPORTED_MODULE_5__.useGroupBy; },\n/* harmony export */   \"defaultGroupByFn\": function() { return /* reexport safe */ _plugin_hooks_useGroupBy__WEBPACK_IMPORTED_MODULE_5__.defaultGroupByFn; },\n/* harmony export */   \"useSortBy\": function() { return /* reexport safe */ _plugin_hooks_useSortBy__WEBPACK_IMPORTED_MODULE_6__.useSortBy; },\n/* harmony export */   \"defaultOrderByFn\": function() { return /* reexport safe */ _plugin_hooks_useSortBy__WEBPACK_IMPORTED_MODULE_6__.defaultOrderByFn; },\n/* harmony export */   \"usePagination\": function() { return /* reexport safe */ _plugin_hooks_usePagination__WEBPACK_IMPORTED_MODULE_7__.usePagination; },\n/* harmony export */   \"_UNSTABLE_usePivotColumns\": function() { return /* reexport safe */ _plugin_hooks_UNSTABLE_usePivotColumns__WEBPACK_IMPORTED_MODULE_8__._UNSTABLE_usePivotColumns; },\n/* harmony export */   \"useRowSelect\": function() { return /* reexport safe */ _plugin_hooks_useRowSelect__WEBPACK_IMPORTED_MODULE_9__.useRowSelect; },\n/* harmony export */   \"useRowState\": function() { return /* reexport safe */ _plugin_hooks_useRowState__WEBPACK_IMPORTED_MODULE_10__.useRowState; },\n/* harmony export */   \"useColumnOrder\": function() { return /* reexport safe */ _plugin_hooks_useColumnOrder__WEBPACK_IMPORTED_MODULE_11__.useColumnOrder; },\n/* harmony export */   \"useResizeColumns\": function() { return /* reexport safe */ _plugin_hooks_useResizeColumns__WEBPACK_IMPORTED_MODULE_12__.useResizeColumns; },\n/* harmony export */   \"useAbsoluteLayout\": function() { return /* reexport safe */ _plugin_hooks_useAbsoluteLayout__WEBPACK_IMPORTED_MODULE_13__.useAbsoluteLayout; },\n/* harmony export */   \"useBlockLayout\": function() { return /* reexport safe */ _plugin_hooks_useBlockLayout__WEBPACK_IMPORTED_MODULE_14__.useBlockLayout; },\n/* harmony export */   \"useFlexLayout\": function() { return /* reexport safe */ _plugin_hooks_useFlexLayout__WEBPACK_IMPORTED_MODULE_15__.useFlexLayout; },\n/* harmony export */   \"useGridLayout\": function() { return /* reexport safe */ _plugin_hooks_useGridLayout__WEBPACK_IMPORTED_MODULE_16__.useGridLayout; }\n/* harmony export */ });\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _publicUtils__WEBPACK_IMPORTED_MODULE_0__) if([\"default\",\"useTable\",\"useExpanded\",\"useFilters\",\"useGlobalFilter\",\"useGroupBy\",\"defaultGroupByFn\",\"useSortBy\",\"defaultOrderByFn\",\"usePagination\",\"_UNSTABLE_usePivotColumns\",\"useRowSelect\",\"useRowState\",\"useColumnOrder\",\"useResizeColumns\",\"useAbsoluteLayout\",\"useBlockLayout\",\"useFlexLayout\",\"useGridLayout\"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _publicUtils__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n/* harmony import */ var _hooks_useTable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hooks/useTable */ \"./node_modules/react-table/src/hooks/useTable.js\");\n/* harmony import */ var _plugin_hooks_useExpanded__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./plugin-hooks/useExpanded */ \"./node_modules/react-table/src/plugin-hooks/useExpanded.js\");\n/* harmony import */ var _plugin_hooks_useFilters__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./plugin-hooks/useFilters */ \"./node_modules/react-table/src/plugin-hooks/useFilters.js\");\n/* harmony import */ var _plugin_hooks_useGlobalFilter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./plugin-hooks/useGlobalFilter */ \"./node_modules/react-table/src/plugin-hooks/useGlobalFilter.js\");\n/* harmony import */ var _plugin_hooks_useGroupBy__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./plugin-hooks/useGroupBy */ \"./node_modules/react-table/src/plugin-hooks/useGroupBy.js\");\n/* harmony import */ var _plugin_hooks_useSortBy__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./plugin-hooks/useSortBy */ \"./node_modules/react-table/src/plugin-hooks/useSortBy.js\");\n/* harmony import */ var _plugin_hooks_usePagination__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./plugin-hooks/usePagination */ \"./node_modules/react-table/src/plugin-hooks/usePagination.js\");\n/* harmony import */ var _plugin_hooks_UNSTABLE_usePivotColumns__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./plugin-hooks/_UNSTABLE_usePivotColumns */ \"./node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js\");\n/* harmony import */ var _plugin_hooks_useRowSelect__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./plugin-hooks/useRowSelect */ \"./node_modules/react-table/src/plugin-hooks/useRowSelect.js\");\n/* harmony import */ var _plugin_hooks_useRowState__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./plugin-hooks/useRowState */ \"./node_modules/react-table/src/plugin-hooks/useRowState.js\");\n/* harmony import */ var _plugin_hooks_useColumnOrder__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./plugin-hooks/useColumnOrder */ \"./node_modules/react-table/src/plugin-hooks/useColumnOrder.js\");\n/* harmony import */ var _plugin_hooks_useResizeColumns__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./plugin-hooks/useResizeColumns */ \"./node_modules/react-table/src/plugin-hooks/useResizeColumns.js\");\n/* harmony import */ var _plugin_hooks_useAbsoluteLayout__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./plugin-hooks/useAbsoluteLayout */ \"./node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js\");\n/* harmony import */ var _plugin_hooks_useBlockLayout__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./plugin-hooks/useBlockLayout */ \"./node_modules/react-table/src/plugin-hooks/useBlockLayout.js\");\n/* harmony import */ var _plugin_hooks_useFlexLayout__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./plugin-hooks/useFlexLayout */ \"./node_modules/react-table/src/plugin-hooks/useFlexLayout.js\");\n/* harmony import */ var _plugin_hooks_useGridLayout__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./plugin-hooks/useGridLayout */ \"./node_modules/react-table/src/plugin-hooks/useGridLayout.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/index.js?");

/***/ }),

/***/ "./node_modules/react-table/src/makeDefaultPluginHooks.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-table/src/makeDefaultPluginHooks.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ makeDefaultPluginHooks; }\n/* harmony export */ });\nconst defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nfunction makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/makeDefaultPluginHooks.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js":
/*!********************************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"_UNSTABLE_usePivotColumns\": function() { return /* binding */ _UNSTABLE_usePivotColumns; }\n/* harmony export */ });\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* istanbul ignore file */\n\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.resetPivot = 'resetPivot'\n_publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.togglePivot = 'togglePivot'\n\nconst _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.flattenColumns)(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_0__.ensurePluginOrder)(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_0__.useGetLatest)(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstDefined)(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstDefined)(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_0__.makePropGetter)(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_0__.useGetLatest)(autoResetPivot)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_0__.useMountedLayoutEffect)(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_0__.actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/_UNSTABLE_usePivotColumns.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js ***!
  \************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useAbsoluteLayout\": function() { return /* binding */ useAbsoluteLayout; }\n/* harmony export */ });\nconst cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nconst useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useAbsoluteLayout.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useBlockLayout.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useBlockLayout.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useBlockLayout\": function() { return /* binding */ useBlockLayout; }\n/* harmony export */ });\nconst cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useBlockLayout.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useColumnOrder.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useColumnOrder.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useColumnOrder\": function() { return /* binding */ useColumnOrder; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetColumnOrder = 'resetColumnOrder'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setColumnOrder = 'setColumnOrder'\n\nconst useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate)(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    columnOrder => {\n      return dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useColumnOrder.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useExpanded.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useExpanded.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useExpanded\": function() { return /* binding */ useExpanded; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetExpanded = 'resetExpanded'\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleRowExpanded = 'toggleRowExpanded'\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nconst useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.ensurePluginOrder)(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useMountedLayoutEffect)(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (id, value) => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (paginateExpandedRows) {\n      return (0,_utils__WEBPACK_IMPORTED_MODULE_1__.expandRows)(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(instance)\n\n  const getToggleAllRowsExpandedProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.makePropGetter)(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useExpanded.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useFilters.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useFilters.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useFilters\": function() { return /* binding */ useFilters; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _filterTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../filterTypes */ \"./node_modules/react-table/src/filterTypes.js\");\n\n\n\n\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetFilters = 'resetFilters'\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setFilter = 'setFilter'\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setAllFilters = 'setAllFilters'\n\nconst useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFilterMethod)(\n      column.filter,\n      userFilterTypes || {},\n      _filterTypes__WEBPACK_IMPORTED_MODULE_3__\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.functionalUpdate)(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.shouldAutoRemoveFilter)(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.functionalUpdate)(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFilterMethod)(\n          column.filter,\n          userFilterTypes || {},\n          _filterTypes__WEBPACK_IMPORTED_MODULE_3__\n        )\n\n        if (\n          (0,_utils__WEBPACK_IMPORTED_MODULE_1__.shouldAutoRemoveFilter)(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    filters => {\n      dispatch({\n        type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstDefined)(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstDefined)(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFilterMethod)(\n            column.filter,\n            userFilterTypes || {},\n            _filterTypes__WEBPACK_IMPORTED_MODULE_3__\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(autoResetFilters)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useMountedLayoutEffect)(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useFilters.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useFlexLayout.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useFlexLayout.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useFlexLayout\": function() { return /* binding */ useFlexLayout; }\n/* harmony export */ });\nfunction useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useFlexLayout.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useGlobalFilter.js":
/*!**********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useGlobalFilter.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useGlobalFilter\": function() { return /* binding */ useGlobalFilter; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _filterTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../filterTypes */ \"./node_modules/react-table/src/filterTypes.js\");\n\n\n\n\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetGlobalFilter = 'resetGlobalFilter'\n_publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setGlobalFilter = 'setGlobalFilter'\n\nconst useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFilterMethod)(\n      instance.globalFilter,\n      userFilterTypes || {},\n      _filterTypes__WEBPACK_IMPORTED_MODULE_3__\n    )\n\n    const newFilter = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.functionalUpdate)(filterValue, state.globalFilter)\n\n    //\n    if ((0,_utils__WEBPACK_IMPORTED_MODULE_1__.shouldAutoRemoveFilter)(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    filterValue => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFilterMethod)(\n      globalFilter,\n      userFilterTypes || {},\n      _filterTypes__WEBPACK_IMPORTED_MODULE_3__\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.getFirstDefined)(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useGetLatest)(autoResetGlobalFilter)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_2__.useMountedLayoutEffect)(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_2__.actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useGlobalFilter.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useGridLayout.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useGridLayout.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useGridLayout\": function() { return /* binding */ useGridLayout; }\n/* harmony export */ });\nfunction useGridLayout(hooks) {\n  hooks.stateReducers.push(reducer)\n  hooks.getTableProps.push(getTableProps)\n  hooks.getHeaderProps.push(getHeaderProps)\n}\n\nuseGridLayout.pluginName = 'useGridLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: `grid`,\n      gridTemplateColumns: instance.state.gridLayout.columnWidths.map(w => w).join(` `),\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    id: `header-cell-${column.id}`,\n    style: {\n      position: `sticky` //enables a scroll wrapper to be placed around the table and have sticky headers\n    },\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === `init`) {\n    return {\n      gridLayout: {\n        columnWidths: instance.columns.map(() => `auto`),\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === `columnStartResizing`) {\n    const { columnId } = action\n    const columnIndex = instance.visibleColumns.findIndex(col => col.id === columnId)\n    const elWidth = getElementWidth(columnId)\n\n    if (elWidth !== undefined) {\n      return {\n        ...state,\n        gridLayout: {\n          ...state.gridLayout,\n          columnId,\n          columnIndex,\n          startingWidth: elWidth\n        },\n      }\n    } else {\n      return state\n    }\n  }\n\n  if (action.type === `columnResizing`) {\n    const {\n      columnIndex,\n      startingWidth,\n      columnWidths,\n    } = state.gridLayout\n\n    const change = state.columnResizing.startX - action.clientX\n    const newWidth = startingWidth - change\n    const columnWidthsCopy = [...columnWidths]\n    columnWidthsCopy[columnIndex] = `${newWidth}px`\n\n    return {\n      ...state,\n      gridLayout: {\n        ...state.gridLayout,\n        columnWidths: columnWidthsCopy,\n      },\n    }\n  }\n}\n\nfunction getElementWidth(columnId) {\n  const width = document.getElementById(`header-cell-${columnId}`)?.offsetWidth\n\n  if (width !== undefined) {\n    return width\n  }\n}\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useGridLayout.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useGroupBy.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useGroupBy.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useGroupBy\": function() { return /* binding */ useGroupBy; },\n/* harmony export */   \"defaultGroupByFn\": function() { return /* binding */ defaultGroupByFn; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _aggregations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../aggregations */ \"./node_modules/react-table/src/aggregations.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\n\n\n\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.resetGroupBy = 'resetGroupBy'\n_publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.setGroupBy = 'setGroupBy'\n_publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.toggleGroupBy = 'toggleGroupBy'\n\nconst useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_3__.ensurePluginOrder)(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_3__.useGetLatest)(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getFirstDefined)(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getFirstDefined)(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (columnId, value) => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_3__.makePropGetter)(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              _aggregations__WEBPACK_IMPORTED_MODULE_1__[column.aggregate]\n\n        if (aggregateFn) {\n          // Get the columnValues to aggregate\n          const groupedValues = groupedRows.map(row => row.values[column.id])\n\n          // Get the columnValues to aggregate\n          const leafValues = leafRows.map(row => {\n            let columnValue = row.values[column.id]\n\n            if (!depth && column.aggregateValue) {\n              const aggregateValueFn =\n                typeof column.aggregateValue === 'function'\n                  ? column.aggregateValue\n                  : userAggregations[column.aggregateValue] ||\n                    _aggregations__WEBPACK_IMPORTED_MODULE_1__[column.aggregateValue]\n\n              if (!aggregateValueFn) {\n                console.info({ column })\n                throw new Error(\n                  `React Table: Invalid column.aggregateValue option for column listed above`\n                )\n              }\n\n              columnValue = aggregateValueFn(columnValue, row, column)\n            }\n            return columnValue\n          })\n\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.flattenBy)(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_3__.useGetLatest)(autoResetGroupBy)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_3__.useMountedLayoutEffect)(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_3__.actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nfunction defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useGroupBy.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/usePagination.js":
/*!********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/usePagination.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"usePagination\": function() { return /* binding */ usePagination; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n\n\n//\n\n\n\n\n\nconst pluginName = 'usePagination'\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetPage = 'resetPage'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.gotoPage = 'gotoPage'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setPageSize = 'setPageSize'\n\nconst usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate)(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex < pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.ensurePluginOrder)(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetPage)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return (0,_utils__WEBPACK_IMPORTED_MODULE_2__.expandRows)(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    pageIndex => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    pageSize => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/usePagination.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useResizeColumns.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useResizeColumns.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useResizeColumns\": function() { return /* binding */ useResizeColumns; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n\n\n\n\n\n\n// Default Column\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.defaultColumn.canResize = true\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnStartResizing = 'columnStartResizing'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnResizing = 'columnResizing'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnDoneResizing = 'columnDoneResizing'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetResize = 'resetResize'\n\nconst useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.passiveEventSupported)()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'col-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths = [] } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getFirstDefined)(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.ensurePluginOrder)(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetResize)\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    () => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useResizeColumns.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useRowSelect.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useRowSelect.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useRowSelect\": function() { return /* binding */ useRowSelect; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nconst pluginName = 'useRowSelect'\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSelectedRows = 'resetSelectedRows'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllRowsSelected = 'toggleAllRowsSelected'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleRowSelected = 'toggleRowSelected'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nconst useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n    const isSelected = state.selectedRowIds[id]\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.ensurePluginOrder)(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetSelectedRows)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    value => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (id, value) => dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(instance)\n\n  const getToggleAllRowsSelectedProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useRowSelect.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useRowState.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useRowState.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useRowState\": function() { return /* binding */ useRowState; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nconst defaultInitialRowStateAccessor = row => ({})\nconst defaultInitialCellStateAccessor = cell => ({})\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setRowState = 'setRowState'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setCellState = 'setCellState'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetRowState = 'resetRowState'\n\nconst useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate)(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId])\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(\n            rowsById[rowId]?.cells?.find(cell => cell.column.id === columnId)\n          )\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.functionalUpdate)(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetRowState)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(cell)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useRowState.js?");

/***/ }),

/***/ "./node_modules/react-table/src/plugin-hooks/useSortBy.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-table/src/plugin-hooks/useSortBy.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"useSortBy\": function() { return /* binding */ useSortBy; },\n/* harmony export */   \"defaultOrderByFn\": function() { return /* binding */ defaultOrderByFn; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ \"./node_modules/react-table/src/utils.js\");\n/* harmony import */ var _sortTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sortTypes */ \"./node_modules/react-table/src/sortTypes.js\");\n\n\n\n\n\n\n\n\n// Actions\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSortBy = 'resetSortBy'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setSortBy = 'setSortBy'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleSortBy = 'toggleSortBy'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.clearSortBy = 'clearSortBy'\n\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.defaultColumn.sortType = 'alphanumeric'\n_publicUtils__WEBPACK_IMPORTED_MODULE_1__.defaultColumn.sortDescFirst = false\n\nconst useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.ensurePluginOrder)(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    sortBy => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = react__WEBPACK_IMPORTED_MODULE_0__.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getFirstDefined)(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : (0,_utils__WEBPACK_IMPORTED_MODULE_2__.getFirstDefined)(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.makePropGetter)(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            (0,_utils__WEBPACK_IMPORTED_MODULE_2__.isFunction)(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            _sortTypes__WEBPACK_IMPORTED_MODULE_3__[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows || row.subRows.length === 0) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = (0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useGetLatest)(autoResetSortBy)\n\n  ;(0,_publicUtils__WEBPACK_IMPORTED_MODULE_1__.useMountedLayoutEffect)(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: _publicUtils__WEBPACK_IMPORTED_MODULE_1__.actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nfunction defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/plugin-hooks/useSortBy.js?");

/***/ }),

/***/ "./node_modules/react-table/src/publicUtils.js":
/*!*****************************************************!*\
  !*** ./node_modules/react-table/src/publicUtils.js ***!
  \*****************************************************/
/***/ (function() {

eval("throw new Error(\"Module parse failed: Unexpected token (10:35)\\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\\n| \\n| export const defaultRenderer = ({ value = '' }) => value;\\n> export const emptyRenderer = () => <>&nbsp;</>;\\n| \\n| export const defaultColumn = {\");\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/publicUtils.js?");

/***/ }),

/***/ "./node_modules/react-table/src/sortTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/react-table/src/sortTypes.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"alphanumeric\": function() { return /* binding */ alphanumeric; },\n/* harmony export */   \"datetime\": function() { return /* binding */ datetime; },\n/* harmony export */   \"basic\": function() { return /* binding */ basic; },\n/* harmony export */   \"string\": function() { return /* binding */ string; },\n/* harmony export */   \"number\": function() { return /* binding */ number; }\n/* harmony export */ });\nconst reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nconst alphanumeric = (rowA, rowB, columnId) => {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\nfunction datetime(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nfunction basic(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\nfunction string(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  a = a.split('').filter(Boolean)\n  b = b.split('').filter(Boolean)\n\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    let alower = aa.toLowerCase()\n    let blower = bb.toLowerCase()\n\n    // Case insensitive comparison until characters match\n    if (alower > blower) {\n      return 1\n    }\n    if (blower > alower) {\n      return -1\n    }\n    // If lowercase characters are identical\n    if (aa > bb) {\n      return 1\n    }\n    if (bb > aa) {\n      return -1\n    }\n    continue\n  }\n\n  return a.length - b.length\n}\n\nfunction number(rowA, rowB, columnId) {\n  let [a, b] = getRowValuesByColumnID(rowA, rowB, columnId)\n\n  const replaceNonNumeric = /[^0-9.]/gi\n\n  a = Number(String(a).replace(replaceNonNumeric, ''))\n  b = Number(String(b).replace(replaceNonNumeric, ''))\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValuesByColumnID(row1, row2, columnId) {\n  return [row1.values[columnId], row2.values[columnId]]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/sortTypes.js?");

/***/ }),

/***/ "./node_modules/react-table/src/utils.js":
/*!***********************************************!*\
  !*** ./node_modules/react-table/src/utils.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"findMaxDepth\": function() { return /* binding */ findMaxDepth; },\n/* harmony export */   \"linkColumnStructure\": function() { return /* binding */ linkColumnStructure; },\n/* harmony export */   \"flattenColumns\": function() { return /* binding */ flattenColumns; },\n/* harmony export */   \"assignColumnAccessor\": function() { return /* binding */ assignColumnAccessor; },\n/* harmony export */   \"decorateColumn\": function() { return /* binding */ decorateColumn; },\n/* harmony export */   \"makeHeaderGroups\": function() { return /* binding */ makeHeaderGroups; },\n/* harmony export */   \"getBy\": function() { return /* binding */ getBy; },\n/* harmony export */   \"getFirstDefined\": function() { return /* binding */ getFirstDefined; },\n/* harmony export */   \"getElementDimensions\": function() { return /* binding */ getElementDimensions; },\n/* harmony export */   \"isFunction\": function() { return /* binding */ isFunction; },\n/* harmony export */   \"flattenBy\": function() { return /* binding */ flattenBy; },\n/* harmony export */   \"expandRows\": function() { return /* binding */ expandRows; },\n/* harmony export */   \"getFilterMethod\": function() { return /* binding */ getFilterMethod; },\n/* harmony export */   \"shouldAutoRemoveFilter\": function() { return /* binding */ shouldAutoRemoveFilter; },\n/* harmony export */   \"unpreparedAccessWarning\": function() { return /* binding */ unpreparedAccessWarning; },\n/* harmony export */   \"passiveEventSupported\": function() { return /* binding */ passiveEventSupported; }\n/* harmony export */ });\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./publicUtils */ \"./node_modules/react-table/src/publicUtils.js\");\n/* harmony import */ var _publicUtils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_publicUtils__WEBPACK_IMPORTED_MODULE_0__);\n\n\n// Find the depth of the columns\nfunction findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nfunction linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nfunction flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nfunction assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nfunction decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: _publicUtils__WEBPACK_IMPORTED_MODULE_0__.emptyRenderer,\n    Footer: _publicUtils__WEBPACK_IMPORTED_MODULE_0__.emptyRenderer,\n    ..._publicUtils__WEBPACK_IMPORTED_MODULE_0__.defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nfunction makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nfunction getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nfunction getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nfunction isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nfunction flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nfunction expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = (row, addToExpandedRows = true) => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    if (addToExpandedRows) {\n      expandedRows.push(row)\n    }\n\n    if (row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(row => handleRow(row, expandSubRows))\n    }\n  }\n\n  rows.forEach(row => handleRow(row))\n\n  return expandedRows\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nfunction shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nfunction unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nfunction passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n\n\n//# sourceURL=webpack://react-hugo/./node_modules/react-table/src/utils.js?");

/***/ })

}]);